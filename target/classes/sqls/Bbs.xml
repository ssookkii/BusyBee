<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!--   테이블 생성 SQL - busybee_bbs
CREATE TABLE busybee_bbs
(
    `seq`        INT              NOT NULL    AUTO_INCREMENT COMMENT '글번호. 글번호', 
    `ref`        DECIMAL(8)       NOT NULL    COMMENT '그룹번호. 그룹번호', 
    `step`       DECIMAL(8)       NOT NULL    COMMENT '행번호. 행번호', 
    `depth`      DECIMAL(8)       NOT NULL    COMMENT '깊이번호. 깊이번호', 
    `id`         VARCHAR(50)      NOT NULL    COMMENT '작성자. 회원 아이디', 
    `title`      VARCHAR(200)     NOT NULL    COMMENT '제목. 제목', 
    `content`    VARCHAR(4000)    NOT NULL    COMMENT '내용. 내용', 
    `wdate`      TIMESTAMP        NOT NULL    COMMENT '작성일. 작성일', 
    `readcount`  DECIMAL(8)       NOT NULL    COMMENT '조회수. 조회수', 
    `org`        VARCHAR(50)      NOT NULL    COMMENT '조직명. 조직명', 
    `filename`   VARCHAR(50)      NOT NULL    COMMENT '파일명. 파일명', 
    `newfilename`   VARCHAR(50)      NOT NULL    COMMENT '시스템파일명. 시스템파일명', 
    `category`   VARCHAR(50)      NOT NULL    COMMENT '카테고리', 
    `del`        INT              NOT NULL    COMMENT '삭제', 
    `groupCode`   VARCHAR(8)       NOT NULL    COMMENT '그룹 코드', 

     PRIMARY KEY (seq)
);


테이블 생성 SQL - busybee_bbscomment
CREATE TABLE busybee_bbscomment
(
    `seq`      INT              NOT NULL    COMMENT '글번호. 부모글번호', 
    `anseq`    INT              NOT NULL    AUTO_INCREMENT COMMENT '댓글번호. 댓글번호', 
    `id`       VARCHAR(50)      NOT NULL    COMMENT '작성자. 회원 아이디', 
    `content`  VARCHAR(4000)    NOT NULL    COMMENT '내용. 내용', 
    `wdate`    TIMESTAMP        NOT NULL    COMMENT '작성일. 작성일', 
     PRIMARY KEY (anseq)
);

Foreign Key 설정 SQL - busybee_bbscomment(seq) -> busybee_bbs(seq)
ALTER TABLE busybee_bbscomment
    ADD CONSTRAINT FK_busybee_bbscomment_seq_busybee_bbs_seq FOREIGN KEY (seq)
        REFERENCES busybee_bbs (seq) ON DELETE RESTRICT ON UPDATE RESTRICT;

Foreign Key 삭제 SQL - busybee_bbscomment(seq)
ALTER TABLE busybee_bbscomment
 DROP FOREIGN KEY FK_busybee_bbscomment_seq_busybee_bbs_seq;


busybee_star Table Create SQL
테이블 생성 SQL - busybee_star
CREATE TABLE busybee_star
(
    `id`   VARCHAR(50)    NOT NULL    COMMENT '작성자', 
    `seq`  INT            NOT NULL    COMMENT '글번호'
);

 Foreign Key 설정 SQL - busybee_star(id, seq) -> busybee_bbs(id, seq)
ALTER TABLE busybee_star
    ADD CONSTRAINT FK_busybee_star_id_busybee_bbs_id FOREIGN KEY (id, seq)
        REFERENCES busybee_bbs (id, seq) ON DELETE RESTRICT ON UPDATE RESTRICT;

Foreign Key 삭제 SQL - busybee_star(id, seq)
ALTER TABLE busybee_star
 DROP FOREIGN KEY FK_busybee_star_id_busybee_bbs_id;

*/ -->
	
	
<mapper namespace="Bbs">


<select id="bbslist" parameterType="mul.cam.a.dto.BbsParam"
	resultType="mul.cam.a.dto.BbsDto">

	select seq, ref, step, depth, id, title, content, wdate, readcount, org, filename, newfilename, category, del
	from
		(select row_number()over(order by ref desc, step asc) as rnum,
			seq, ref, step, depth, id, title, content, wdate, readcount, org, filename, newfilename, category, del
		 from busybee_bbs
		 where 1=1
		 <if test="category != null and category != ''">
		 and category=#{category}
		 </if>
		 <if test="choice != null and choice != '' and search != null and search != '' ">
		 	<if test="choice == 'title'">
		 		and title like concat('%', #{search}, '%') and del=0
		 	</if>
		 	<if test="choice == 'content'">
		 		and content like concat('%', #{search}, '%') and del=0
		 	</if>
		 	<if test="choice == 'writer'">
		 		and id=#{search} and del=0
		 	</if>
		 </if>
		 
		 order by ref desc, step asc) a
	where rnum between ${start} and ${end}
</select>

<!-- 글의 총수 -->
<select id="getAllBbs" parameterType="mul.cam.a.dto.BbsParam" resultType="java.lang.Integer">
	
	select ifnull(count(*), 0)
	from busybee_bbs
	where 1=1
	<if test="category != null and category != ''">
	and category=#{category}
	</if>
	<if test="choice != null and choice != '' and search != null and search != '' ">
	 	<if test="choice == 'title'">
	 		and title like concat('%', #{search}, '%')
	 	</if>
	 	<if test="choice == 'content'">
	 		and content like concat('%', #{search}, '%')
	 	</if>
	 	<if test="choice == 'writer'">
	 		and id=#{search}
	 	</if>
	 </if>
</select>


<insert id="writeBbs" parameterType="mul.cam.a.dto.BbsDto">
INSERT INTO busybee_bbs(`ref`, step, `depth`, id, title, content, wdate, readcount, org, filename, newfilename, category, del)
VALUES((select ifnull(max(ref), 0)+1 from busybee_bbs b), 0, 0, #{id}, #{title}, #{content}, now(), 0, #{org}, #{filename}, #{newfilename}, #{category}, 0)

</insert>

<select id="getBbs" parameterType="Integer" resultType="mul.cam.a.dto.BbsDto">
	select seq, ref, step, depth, id, title, content, wdate, readcount, org, filename, newfilename, category, del
	from busybee_bbs
	where seq=#{seq}
</select>

<update id="updateBbs" parameterType="mul.cam.a.dto.BbsDto">
	update busybee_bbs
	set title=#{title}, content=#{content}, filename=#{filename}, 
		newfilename=#{newfilename}, wdate=now()
	where seq=#{seq}
</update>

<update id="deletBbs" parameterType="Integer">
	update busybee_bbs
	set del = 1
	where seq=#{seq}
</update>

<insert id="commentWrite" parameterType="mul.cam.a.dto.BbsComment">
	insert into busybee_bbscomment(seq, id, content, wdate)
	values(#{seq}, #{id}, #{content}, now())
</insert>

<select id="commentList" parameterType="Integer" resultType="mul.cam.a.dto.BbsComment">
	select seq, anseq, id, content, wdate
	from busybee_bbscomment
	where seq=#{seq}
	order by wdate desc
</select>

<delete id="deleteBbscomment" parameterType="Integer">
	delete from busybee_bbscomment
	where anseq=#{anseq}
</delete>

<insert id="staradd" parameterType="mul.cam.a.dto.starDto">
	insert into busybee_star(seq, id)
	values(#{seq}, #{id})
</insert>

<select id="starlist" parameterType="java.lang.String" resultType="mul.cam.a.dto.starDto">
	select id, seq
	from busybee_star
	where id=#{id}
</select>

</mapper>






