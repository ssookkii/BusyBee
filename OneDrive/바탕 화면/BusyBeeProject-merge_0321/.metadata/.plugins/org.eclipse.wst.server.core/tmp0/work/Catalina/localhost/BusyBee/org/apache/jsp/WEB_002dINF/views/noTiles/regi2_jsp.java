/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-17 16:41:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.noTiles;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class regi2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("    \n");

	String id = (String) request.getAttribute("id");
	String password = (String) request.getAttribute("password");
	String email = (String) request.getAttribute("email");

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<!-- AJAX -->\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\n");
      out.write("\n");
      out.write("<!-- 파일유효성 검사를 위한 JQuery 버전 -->\n");
      out.write("<script src=\"http://code.jquery.com/jquery-migrate-1.2.1.js\"></script>\n");
      out.write("\n");
      out.write("<!-- 비밀번호 암호화(SHA256) -->\n");
      out.write("<script	src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.min.js\"></script>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<form action=\"regiAf.do\" id=\"frm\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("이름 : <input type=\"text\" id=\"name\" name=\"name\"> <h3 id=\"nameCheck\"></h3>\n");
      out.write("생년월일 : <input type=\"date\" id=\"birth\" name=\"birth\">\n");
      out.write("\n");
      out.write("연락처 : <input type=\"text\" id=\"phone\" name=\"phone\"> 공개<input type=\"checkbox\" id=\"phone_public\" name=\"phone_public\">\n");
      out.write("\n");
      out.write("프로필사진 : <input type=\"file\" accept=\"image/png, iamge/jpeg\" id=\"profPic\" name=\"profPic\">\n");
      out.write("상태메세지 : <input type=\"text\" name=\"profMsg\">\n");
      out.write("\n");
      out.write("<input type=\"hidden\" name=\"id\" value='");
      out.print(id );
      out.write("'>\n");
      out.write("<input type=\"hidden\" id=\"password\" name=\"password\" value='");
      out.print(password );
      out.write("'>\n");
      out.write("<input type=\"hidden\" name=\"email\" value='");
      out.print(email );
      out.write("'>\n");
      out.write("\n");
      out.write("<input type=\"hidden\" id=\"name_OK\">\n");
      out.write("<input type=\"hidden\" id=\"phone_OK\">\n");
      out.write("\n");
      out.write("<button type=\"button\" onclick=\"go_regiAf()\">회원가입</button>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("var saltpw = '");
      out.print(password);
      out.write("'.substr(0,2) + '");
      out.print(password);
      out.write("' + '");
      out.print(password);
      out.write("'.substr('");
      out.print(password);
      out.write("'.length-2, '");
      out.print(password);
      out.write("'.length);\n");
      out.write("\n");
      out.write("\n");
      out.write("function knowprof(){\n");
      out.write("	alert($(\"#profPic\").val());\n");
      out.write("}\n");
      out.write("\n");
      out.write("var name_OK = document.getElementById(\"name_OK\").value;\n");
      out.write("var phone_OK = document.getElementById(\"phone_OK\").value;\n");
      out.write("\n");
      out.write("$(\"#name\").keyup(function(e){\n");
      out.write("	\n");
      out.write("	let key = e.key || e.keyCode;\n");
      out.write("\n");
      out.write("	if($(\"#name\").val()==\"\") {\n");
      out.write("		$(\"#nameCheck\").text('');\n");
      out.write("		name_OK=false;\n");
      out.write("		return;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	if(key==\" \" || key==32) {\n");
      out.write("		alert('이름에는 공백이 들어갈 수 없습니다.');\n");
      out.write("		$(\"#name\").val('');\n");
      out.write("		$(\"#nameCheck\").text('');\n");
      out.write("		name_OK=false;\n");
      out.write("		return;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	if($(\"#name\").val().length<15) {\n");
      out.write("		$(\"#nameCheck\").text('사용 가능한 이름입니다.');\n");
      out.write("		name_OK = true;\n");
      out.write("	} else {\n");
      out.write("		$(\"#nameCheck\").text('이름은 15자를 넘어갈 수 없습니다.');\n");
      out.write("		name_OK=false;\n");
      out.write("	}\n");
      out.write("});\n");
      out.write("\n");
      out.write("$(\"#phone\").keyup(function(e){\n");
      out.write("	\n");
      out.write("	let key = e.key || e.keyCode;\n");
      out.write("\n");
      out.write("	\n");
      out.write("	if($(\"#phone\").val()==\"\") {\n");
      out.write("		phone_OK=false;\n");
      out.write("		return;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	// 유효성 검사\n");
      out.write("	if(key==\" \" || key==32 || key==\"-\" || key==109) {\n");
      out.write("		alert(\"공백이나 '-' 를 제외하고 입력해주세요.\");\n");
      out.write("		$(\"#phone\").val('');\n");
      out.write("		phone_OK=false;\n");
      out.write("		return;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	var phoneValid = /[0-9]/g;\n");
      out.write("	\n");
      out.write("	if(!phoneValid.test($(\"#phone\").val())) {\n");
      out.write("		alert(\"숫자만 입력해주세요.\");\n");
      out.write("		$(\"#phone\").val('');\n");
      out.write("		phone_OK=false;\n");
      out.write("		return;\n");
      out.write("	} else {\n");
      out.write("		phone_OK=true;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("});\n");
      out.write("\n");
      out.write("function go_regiAf() {\n");
      out.write("	\n");
      out.write("	var birth = document.getElementById(\"birth\").value;\n");
      out.write("	\n");
      out.write("	if(!name_OK) {\n");
      out.write("		alert('이름을 확인해주세요.');\n");
      out.write("		$(\"#name\").focus();\n");
      out.write("	} else if(birth==null || birth==\"\") {\n");
      out.write("		alert('생년월일을 설정해주세요.');\n");
      out.write("		$(\"#birth\").focus();\n");
      out.write("	} else if(!phone_OK) {\n");
      out.write("		alert('핸드폰 번호를 확인해주세요.');\n");
      out.write("		$(\"#phone\").focus();\n");
      out.write("	} else {\n");
      out.write("		$(\"#password\").val(sha256(saltpw));\n");
      out.write("		$(\"#frm\").submit();\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("\n");
      out.write("// 파일 유효성 검사\n");
      out.write("$(document).on(\"change\", \"input[type='file']\", function(){\n");
      out.write("\n");
      out.write("	// 이미지 확장자 유효성 검사\n");
      out.write("	var file_path = $(this).val();\n");
      out.write("	var reg = /(.*?)\\.(jpg|jpeg|png)$/;\n");
      out.write("\n");
      out.write("	if (file_path != \"\" && (file_path.match(reg) == null || reg.test(file_path) == false)) {\n");
      out.write("\n");
      out.write("		if ($.browser.msie) { // ie 일때 \n");
      out.write("			$(this).replaceWith($(this).clone(true));\n");
      out.write("		} else {\n");
      out.write("			$(this).val(\"\");\n");
      out.write("		}\n");
      out.write("		alert(\"이미지 파일만 업로드 가능합니다.\");\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	// 파일명 길이 유효성 검사\n");
      out.write("	var filename = $(\"#profPic\").val().substr(12);\n");
      out.write("	if(filename.length>20) {\n");
      out.write("		alert(\"파일명은 확장자를 포함하여, 20자를 넘길 수 없습니다.\");\n");
      out.write("		$(this).val(\"\");\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	// [참고] 저는 C:/fakepath/로 파일 경로가 설정되기 때문에 substr(12)로 잡았는데,\n");
      out.write("	// 다른 분이 테스트하시는 환경에서는 오류가 날 수 있으니\n");
      out.write("	// 프로필 사진명은 짧게 해서 올리시는 것을 추천합니다!\n");
      out.write("});\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
