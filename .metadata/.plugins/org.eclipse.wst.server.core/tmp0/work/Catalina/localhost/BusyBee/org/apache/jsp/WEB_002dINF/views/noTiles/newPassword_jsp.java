/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-18 10:25:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.noTiles;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class newPassword_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<!-- AJAX -->\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- 비밀번호 암호화(SHA256) -->\r\n");
      out.write("<script	src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3>비밀번호 재설정</h3>\r\n");
      out.write("<hr>\r\n");
      out.write("이름 : <input type=\"text\" id=\"name\">\r\n");
      out.write("아이디 : <input type=\"text\" id=\"id\">\r\n");
      out.write("<br>\r\n");
      out.write("등록 이메일 : <input type=\"text\" id=\"email\">\r\n");
      out.write("<button type=\"button\" id=\"sendCert\" onclick=\"isExist()\">인증번호 발송</button>\r\n");
      out.write("인증번호 : <input type='text' id='certNum' disabled=\"disabled\"> <button type='button' onclick='checkCert()' >확인</button>\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("<br><br><br>\r\n");
      out.write("새 비밀번호 : <input type='password' id='pwd1' disabled=\"disabled\">\r\n");
      out.write("<h3 id='pwdCheck1'></h3>\r\n");
      out.write("새 비밀번호 확인 : <input type='password' id='pwd2' disabled=\"disabled\">\r\n");
      out.write("<h3 id='pwdCheck2'></h3>\r\n");
      out.write("<button type=\"button\" onclick=\"changePwd()\">비밀번호 재설정</button>\r\n");
      out.write("\r\n");
      out.write("<br><br>\r\n");
      out.write("<br>\r\n");
      out.write("<button type=\"button\" onclick=\"location.href='loginMain.do'\">로그인하기</button>\r\n");
      out.write("<button type=\"button\" onclick=\"location.href='findId.do'\">아이디 찾기</button>\r\n");
      out.write("\r\n");
      out.write("<input type=\"hidden\" id=\"email_OK\">\r\n");
      out.write("<input type=\"hidden\" id=\"pwd1_OK\">\r\n");
      out.write("<input type=\"hidden\" id=\"pwd2_OK\">\r\n");
      out.write("\r\n");
      out.write("<table>\r\n");
      out.write("	<tbody id=\"tBody\">\r\n");
      out.write("	</tbody>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<form action=\"updPwd.do\" id=\"frm\" method=\"post\">\r\n");
      out.write("<input type=\"hidden\" id=\"password\" name=\"password\">\r\n");
      out.write("<input type=\"hidden\" id=\"c_id\" name=\"id\">\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("var email_OK = document.getElementById(\"email_OK\").value;\r\n");
      out.write("var pwd1_OK = document.getElementById(\"pwd1_OK\").value;\r\n");
      out.write("var pwd2_OK = document.getElementById(\"pwd2_OK\").value;\r\n");
      out.write("\r\n");
      out.write("function isExist(){\r\n");
      out.write("	\r\n");
      out.write("	// 이메일 정규식\r\n");
      out.write("	var emailValid = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n");
      out.write("	var userEmail = $(\"#email\").val();\r\n");
      out.write("	if(!emailValid.test(userEmail)) {\r\n");
      out.write("		alert('유효한 이메일을 입력해주세요.');\r\n");
      out.write("		$(\"#email\").val('');\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url : \"findforPwd.do\",\r\n");
      out.write("		type : \"post\",\r\n");
      out.write("		data : {\"id\" : $(\"#id\").val(), \"name\" : $(\"#name\").val(), \"email\" : $(\"#email\").val()},\r\n");
      out.write("		success : function(msg) {\r\n");
      out.write("			if(msg==\"findforPwd_SUCCESS\") {\r\n");
      out.write("				$(\"#id\").attr('disabled', true);\r\n");
      out.write("				$(\"#name\").attr('disabled', true);\r\n");
      out.write("				$(\"#email\").attr('disabled', true);\r\n");
      out.write("				doCert();\r\n");
      out.write("			} else {\r\n");
      out.write("				alert('정보를 다시 확인해주세요');\r\n");
      out.write("			}\r\n");
      out.write("		},\r\n");
      out.write("		error : function(msg) {\r\n");
      out.write("			alert('error');\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function doCert() {\r\n");
      out.write("	\r\n");
      out.write("	var userEmail = $(\"#email\").val();\r\n");
      out.write("	var check3 = true;\r\n");
      out.write("	\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url : \"select3.do\",\r\n");
      out.write("		async:false,\r\n");
      out.write("		type : 'get',\r\n");
      out.write("		data : {\"cert_email\" : userEmail},\r\n");
      out.write("		success : function(msg) {\r\n");
      out.write("			if(msg==\"cert3_FAIL\"){\r\n");
      out.write("				alert('일일 최대 인증횟수 3회를 초과했습니다. 다음에 다시 시도해주세요.');\r\n");
      out.write("				location.href='loginMain.do';\r\n");
      out.write("				check3 = false;\r\n");
      out.write("			}\r\n");
      out.write("		},\r\n");
      out.write("		error : function(){\r\n");
      out.write("			alert('error');\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	if (!check3) {\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	else {\r\n");
      out.write("	$.ajax({\r\n");
      out.write("			url : \"mailCheck.do\",\r\n");
      out.write("			type : 'get',\r\n");
      out.write("			data : {\"email\" : userEmail, \"purpose\" : \"find\"},\r\n");
      out.write("			success : function(data) {\r\n");
      out.write("				alert('인증번호가 전송되었습니다. 인증은 일일 3회까지 가능합니다.');\r\n");
      out.write("				$(\"#certNum\").attr(\"disabled\", false);\r\n");
      out.write("				authkey = data;\r\n");
      out.write("			},\r\n");
      out.write("			error : function(){\r\n");
      out.write("				alert('error');\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function checkCert(){\r\n");
      out.write("	\r\n");
      out.write("	var userEmail = $(\"#email\").val();\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		type : 'get',\r\n");
      out.write("		url : \"selectCert.do\",\r\n");
      out.write("		data : {\"cert_email\" : userEmail, \"authkey\" : $(\"#certNum\").val()},\r\n");
      out.write("		success : function(msg) {\r\n");
      out.write("			if(msg!=null && msg!=\"\"){\r\n");
      out.write("				if(msg==\"cert_SUCCESS\") {\r\n");
      out.write("					alert(\"인증되었습니다. 이어서 비밀번호를 재설정해주세요.\");\r\n");
      out.write("					$(\"#certNum\").attr('disabled', true);\r\n");
      out.write("					$(\"#sendCert\").attr('disabled', true);\r\n");
      out.write("					$(\"#pwd1\").attr('disabled', false);\r\n");
      out.write("					$(\"#pwd2\").attr('disabled', false);\r\n");
      out.write("					email_OK=true;\r\n");
      out.write("				} else {\r\n");
      out.write("					$(\"certNum\").val('');\r\n");
      out.write("					alert(\"잘못된 인증번호입니다. 다시 확인해주세요\");\r\n");
      out.write("					email_OK=false;\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("		},\r\n");
      out.write("		error : function() {\r\n");
      out.write("			alert('error');\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(\"#pwd1\").keyup(function(e){\r\n");
      out.write("	\r\n");
      out.write("	let key = e.key || e.keyCode;\r\n");
      out.write("\r\n");
      out.write("	if($(\"#pwd1\").val()==\"\") {\r\n");
      out.write("		$(\"#pwdCheck1\").text('');\r\n");
      out.write("		$(\"#pwdCheck2\").text('');\r\n");
      out.write("		pwd1_OK=false;\r\n");
      out.write("		pwd2_OK=false;\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	if(key==\" \" || key==32) {\r\n");
      out.write("		alert('비밀번호에는 공백이 들어갈 수 없습니다.');\r\n");
      out.write("		$(\"#pwd1\").val('');\r\n");
      out.write("		$(\"#pwdCheck1\").text('');\r\n");
      out.write("		pwd1_OK=false;\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	if($(\"#pwd1\").val()==$(\"#pwd2\").val()) {\r\n");
      out.write("		$(\"#pwdCheck2\").text('동일합니다.');\r\n");
      out.write("		pwd2_OK=true;\r\n");
      out.write("	} else{\r\n");
      out.write("		$(\"#pwdCheck2\").text('');\r\n");
      out.write("		pwd2_OK=false;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// PWD 유효성 검사\r\n");
      out.write("	var pwd1 = $(\"#pwd1\").val();\r\n");
      out.write("	var numValid = pwd1.search(/[0-9]/g);\r\n");
      out.write("	var engValid = pwd1.search(/[a-z]/ig);\r\n");
      out.write("	var speValid = pwd1.search(/[`~!@@#$%^&*|₩₩₩'₩\";:₩/?]/gi);\r\n");
      out.write("	\r\n");
      out.write("	if (pwd1.length<8 || pwd1.length>20) {\r\n");
      out.write("		$(\"#pwdCheck1\").text('비밀번호는 6~20자로 설정해주세요.');\r\n");
      out.write("		pwd1_OK=false;\r\n");
      out.write("	} else if(numValid < 0 || engValid < 0 || speValid < 0 ){\r\n");
      out.write("		$(\"#pwdCheck1\").text('비밀번호에는 숫자, 영문, 특수문자가 모두 포함되어있어야 합니다.');\r\n");
      out.write("		pwd1_OK=false;\r\n");
      out.write("	} else {\r\n");
      out.write("		$(\"#pwdCheck1\").text('사용가능한 비밀번호입니다.');\r\n");
      out.write("		pwd1_OK=true;\r\n");
      out.write("	}\r\n");
      out.write("});\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("// PWD(2/2)\r\n");
      out.write("\r\n");
      out.write("$(\"#pwd2\").keyup(function(){\r\n");
      out.write("	\r\n");
      out.write("	if($(\"#pwd2\").val()==\"\") {\r\n");
      out.write("		$(\"#pwdCheck2\").text('');\r\n");
      out.write("		pwd2_OK=false;\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	if($(\"#pwd1\").val()!=$(\"#pwd2\").val()) {\r\n");
      out.write("		$(\"#pwdCheck2\").text('동일한 비밀번호를 입력해주세요.');\r\n");
      out.write("		pwd2_OK=false;\r\n");
      out.write("	} else {\r\n");
      out.write("		$(\"#pwdCheck2\").text('동일합니다.');\r\n");
      out.write("		pwd2_OK=true;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function changePwd() {\r\n");
      out.write("	\r\n");
      out.write("	if(!email_OK) {\r\n");
      out.write("		alert('이메일 인증을 진행해주세요.');\r\n");
      out.write("		$(\"#email\").focus();\r\n");
      out.write("	} else if((!pwd1_OK)) {\r\n");
      out.write("		alert('사용 가능한 비밀번호인지 확인해주세요.');\r\n");
      out.write("		$(\"#pwd1\").focus();		\r\n");
      out.write("	} else if((!pwd2_OK)) {\r\n");
      out.write("		alert('동일한 비밀번호를 입력했는지 확인해주세요.');\r\n");
      out.write("		$(\"#pwd2\").focus();\r\n");
      out.write("	} else {\r\n");
      out.write("		var userPwd = $(\"#pwd1\").val();\r\n");
      out.write("		var saltpw = userPwd.substr(0,2) + userPwd + userPwd.substr(userPwd.length-2, userPwd.length);\r\n");
      out.write("		$(\"#c_id\").val($(\"#id\").val());\r\n");
      out.write("		$(\"#password\").val(sha256(saltpw));\r\n");
      out.write("		$(\"#frm\").submit();\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
