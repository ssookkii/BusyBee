/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-17 15:49:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.calendar;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import mul.cam.a.dao.GroupDao;
import mul.cam.a.service.impl.GroupServiceImpl;
import mul.cam.a.service.GroupService;
import mul.cam.a.dto.GroupDto;
import mul.cam.a.service.EventService;
import mul.cam.a.dto.UserDto;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.DateFormat;
import java.util.List;
import mul.cam.a.dto.EventDto;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("mul.cam.a.dto.UserDto");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("mul.cam.a.dto.EventDto");
    _jspx_imports_classes.add("mul.cam.a.service.GroupService");
    _jspx_imports_classes.add("mul.cam.a.dto.GroupDto");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("mul.cam.a.service.EventService");
    _jspx_imports_classes.add("mul.cam.a.service.impl.GroupServiceImpl");
    _jspx_imports_classes.add("java.text.DateFormat");
    _jspx_imports_classes.add("mul.cam.a.dao.GroupDao");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("	\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>일정 관리</title>\n");
      out.write("<link rel=\"stylesheet\" href=\"css/mystyle.css\">\n");
      out.write("\n");
      out.write("<!-- jQuery -->\n");
      out.write("<script\n");
      out.write("	src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n");
      out.write("\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("	href=\"https://bootswatch.com/5/minty/bootstrap.min.css\">\n");
      out.write("\n");
      out.write("\n");
      out.write("<!-- Moment.js -->\n");
      out.write("<script\n");
      out.write("	src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js\"></script>\n");
      out.write("<script\n");
      out.write("	src='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.js'></script>\n");
      out.write("\n");
      out.write("<!-- Bootstrap Datepicker -->\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.css\">\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.2/css/bootstrap-responsive.css\">\n");
      out.write("<script\n");
      out.write("	src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.js\"></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("<!-- timepicker -->\n");
      out.write("<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css\">\n");
      out.write("<script src=\"//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js\"></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

EventDto dto = (EventDto) request.getAttribute("scheduleList");
UserDto login = (UserDto)session.getAttribute("login");
String id = login.getId();
String myGroup = request.getParameter("groupCode");
String myGroupName = "";

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<script>	\n");
      out.write("\n");
      out.write("function initTimepicker() {\n");
      out.write("	  $('#edit-start-time, #edit-end-time').timepicker({\n");
      out.write("	    timeFormat: 'HH:mm',\n");
      out.write("	    interval: 30,\n");
      out.write("	    defaultTime: '9',\n");
      out.write("	    minTime: '0',\n");
      out.write("	    maxTime: '23',\n");
      out.write("	    startTime:'0',\n");
      out.write("	    dynamic: false,\n");
      out.write("	    dropdown: true,\n");
      out.write("	    scrollbar: true\n");
      out.write("	  });\n");
      out.write("	}	\n");
      out.write("		// 캘린더 영역 생성\n");
      out.write("	$(document).ready(function() {\n");
      out.write("\n");
      out.write("		$(document).ready(function(){\n");
      out.write("\n");
      out.write("		  var group1;\n");
      out.write("		  var group2;\n");
      out.write("\n");
      out.write("		  // Leader\n");
      out.write("		  $.ajax({\n");
      out.write("		    url:'selectGroup1.do?id=' + '");
      out.print(id);
      out.write("',\n");
      out.write("		    type:\"get\",\n");
      out.write("		    success:function(data) {\n");
      out.write("		      if(data!=null && data!=\"\") {\n");
      out.write("		        var group = '';\n");
      out.write("		        $.each(data, function(i){\n");
      out.write("		        	if( data[i].group_code === '");
      out.print(myGroup);
      out.write("') { \n");
      out.write("		        		myGroupName = data[i].group_name ;\n");
      out.write("			        console.log(myGroupName);\n");
      out.write("		        	} });\n");
      out.write("		    \n");
      out.write("		        group1 = true;\n");
      out.write("		      } else if (data==null || data==\"\") {\n");
      out.write("		        group1 = false;\n");
      out.write("		      }\n");
      out.write("		    }, \n");
      out.write("		    error:function(){\n");
      out.write("		      alert('error');\n");
      out.write("		    }\n");
      out.write("		  });\n");
      out.write("\n");
      out.write("		  // Member\n");
      out.write("		  $.ajax({\n");
      out.write("		    url:'selectGroup2.do?id=' + '");
      out.print(id);
      out.write("',\n");
      out.write("		    type:\"get\",\n");
      out.write("		    success:function(data) {\n");
      out.write("		      if(data!=null && data!=\"\") {\n");
      out.write("		        var group = '';\n");
      out.write("		        $.each(data, function(i){\n");
      out.write("		        	if( data[i].group_code === '");
      out.print(myGroup);
      out.write("') { \n");
      out.write("		        		myGroupName = data[i].group_name ;\n");
      out.write("			        	console.log(myGroupName);\n");
      out.write("		        	}   });\n");
      out.write("		   \n");
      out.write("		        group2 = true;\n");
      out.write("		      } else if (data==null || data==\"\") {\n");
      out.write("		        group2 = false;\n");
      out.write("		      }\n");
      out.write("		    },\n");
      out.write("		    error:function(){\n");
      out.write("		      alert('error');\n");
      out.write("		    }\n");
      out.write("		  });\n");
      out.write("		});\n");
      out.write("\n");
      out.write("		 setTimeout(function() {\n");
      out.write("		      if (myGroupName !== undefined) {\n");
      out.write("		        var groupNameElem = $('<div style=\"text-align: center; font-size: 20px; font-weight: bold; margin-top: 10px;\">현재 내 그룹: ' + myGroupName + '</div>');\n");
      out.write("		        $('#calendar').before(groupNameElem);\n");
      out.write("		      }\n");
      out.write("		    }, 100);\n");
      out.write("		 \n");
      out.write("	    $('#calendar').fullCalendar({\n");
      out.write("	        // 일정 데이터\n");
      out.write("	        events: function(start, end, timezone, callback) {\n");
      out.write("	        	  $.ajax({\n");
      out.write("\n");
      out.write("	        		  url: 'groupeventlist.do?id=' + '");
      out.print(id);
      out.write("&groupCode=");
      out.print(myGroup);
      out.write("',\n");
      out.write("		                dataType: 'json',\n");
      out.write("		                success: function(response) {\n");
      out.write("		                    var events = [];\n");
      out.write("		                    // 서버에서 가져온 일정 목록을 이벤트 객체로 변환합니다.\n");
      out.write("		                    \n");
      out.write("		                    for (var i = 0; i < response.length; i++) {\n");
      out.write("		                        events.push({\n");
      out.write("		                            id: response[i].id,\n");
      out.write("		                            groupCode: response[i].groupCode,\n");
      out.write("		                            scheduleId:response[i].scheduleId,\n");
      out.write("		                            title: response[i].title,\n");
      out.write("		                            start: moment(response[i].startDate), // moment.js 객체로 변환\n");
      out.write("		                            end: moment(response[i].endDate), // moment.js 객체로 변환\n");
      out.write("		                            description: response[i].description\n");
      out.write("		                        });\n");
      out.write("		                    }\n");
      out.write("		                    // 이벤트 객체 목록을 캘린더에 할당합니다.\n");
      out.write("		                    callback(events);\n");
      out.write("		                }\n");
      out.write("		            })\n");
      out.write("	        },\n");
      out.write("	    \n");
      out.write("	        // 일정 추가/수정/삭제 기능\n");
      out.write("	        editable: true,\n");
      out.write("	        eventStartEditable: true,\n");
      out.write("	        eventDurationEditable: true,\n");
      out.write("	        displayEventTime: false,\n");
      out.write("\n");
      out.write("\n");
      out.write("	        eventClick: function(event, jsEvent, view) {\n");
      out.write("	          \n");
      out.write("	        },\n");
      out.write("\n");
      out.write("	        dayClick: function(date, jsEvent, view) {\n");
      out.write("	            var clickedDate = date.format('YYYY-MM-DD');\n");
      out.write("	            selectedDate = clickedDate;\n");
      out.write("	            \n");
      out.write("	            var events = $('#calendar').fullCalendar('clientEvents', function(event) {\n");
      out.write("	                var days = [];\n");
      out.write("	                var day = moment(event.start);\n");
      out.write("	                var endDay = moment(event.end);\n");
      out.write("	                while (day <= endDay ) {\n");
      out.write("	                    days.push(day.format('YYYY-MM-DD'));\n");
      out.write("	                    day.add(1, 'days');\n");
      out.write("	                }\n");
      out.write("	                \n");
      out.write("	                return days.indexOf(date.format('YYYY-MM-DD')) >= 0;\n");
      out.write("	            });\n");
      out.write("\n");
      out.write("	            if (events.length === 0) {\n");
      out.write("	                // 해당 날짜에 일정이 없는 경우\n");
      out.write("	                $('.card-body').html('<p>해당 날짜에 일정이 없습니다.</p>');\n");
      out.write("	                $('.card-title').html(date.format('YYYY-MM-DD'));\n");
      out.write("	            } else {\n");
      out.write("	                var html = '<table class=\"event-table\"><thead><tr><th></th><th>일정 제목</th><th>일정 시간</th></tr></thead><tbody>';\n");
      out.write("	                $.each(events, function(index, event) {\n");
      out.write("	                	html += '<tr><td><input type=\"checkbox\" name=\"eventIds[]\" value=\"' + event.scheduleId + '\" style=\"display:none;\"></td><td class=\"event-title\" data-eventid=\"' + event.scheduleId + '\">' + event.title + '</td><td>' + moment(event.start).format('YYYY-MM-DD HH:mm') + ' - ' + moment(event.end).format('YYYY-MM-DD HH:mm') + '</td></tr>';\n");
      out.write("\n");
      out.write("	                });\n");
      out.write("	                html += '</tbody></table>';\n");
      out.write("	                $('.card-body').html(html);\n");
      out.write("	                $('.card-title').html(clickedDate);\n");
      out.write("	            }\n");
      out.write("	        },\n");
      out.write("\n");
      out.write("	        });\n");
      out.write("		\n");
      out.write("		\n");
      out.write("\n");
      out.write("		\n");
      out.write("	 // 삭제 버튼 클릭 시 다중삭제 모달 열기\n");
      out.write("	    $('#delete-event-btn').click(function() {\n");
      out.write("	        var events = $('#calendar').fullCalendar('clientEvents', function(event) {\n");
      out.write("	            var days = [];\n");
      out.write("	            var day = moment(event.start);\n");
      out.write("	            var endDay = moment(event.end);\n");
      out.write("\n");
      out.write("	            while (day <= endDay) {\n");
      out.write("	                days.push(day.format('YYYY-MM-DD'));\n");
      out.write("	                day.add(1, 'days');\n");
      out.write("	            }\n");
      out.write("\n");
      out.write("	            return days.indexOf(selectedDate) >= 0;\n");
      out.write("	        });\n");
      out.write("\n");
      out.write("	        if (events.length === 0 ) {\n");
      out.write("	            // 해당 날짜에 일정이 없는 경우\n");
      out.write("	            $('#messageConfirmModal .modal-title').html(selectedDate + '');\n");
      out.write("	            $('#messageConfirmModal .modal-body').html('삭제할 일정이 없습니다');\n");
      out.write("	            $('#messageConfirmModal').modal('show');\n");
      out.write("	        } else {\n");
      out.write("	            var html = '<form>';\n");
      out.write("	            $.each(events, function(index, event) {\n");
      out.write("	                html += '<li style=\"display: block;\"><input type=\"checkbox\" name=\"eventIds[]\" value=\"' + event.scheduleId + '\"> ' + event.title + '</li> <br/>';\n");
      out.write("	            });\n");
      out.write("	            html += '</form>';\n");
      out.write("	            $('#deleteConfirmModal .modal-title').html('삭제할 일정을 선택하세요.');\n");
      out.write("	            $('#deleteConfirmModal .modal-body').html(html);\n");
      out.write("	            $('#deleteConfirmModal #customConfirmBtn').html('삭제');\n");
      out.write("	            $('#deleteConfirmModal').modal('show');\n");
      out.write("	        }\n");
      out.write("	        \n");
      out.write("	        $('#deleteConfirmBtn').click(function() {\n");
      out.write("	        	 // 체크된 일정의 scheduleId들을 배열로 수집\n");
      out.write("	        	 var selectedEventIds = $('input[name=\"eventIds[]\"]:checked').map(function() {\n");
      out.write("	        		    return $(this).val();\n");
      out.write("	        		  }).get();\n");
      out.write("	        	 \n");
      out.write("			    // 일정 삭제 요청, 여러개를 삭제하기 위해 each 사용\n");
      out.write("			    $.each(selectedEventIds, function(index, eventId) {\n");
      out.write("				    $.ajax({\n");
      out.write("				      url: 'eventdelete.do',\n");
      out.write("				      type: 'POST',\n");
      out.write("				      data: { 'scheduleId': eventId },\n");
      out.write("				      success: function(response) {\n");
      out.write("				        // FullCalendar에서 일정 삭제\n");
      out.write("				        $('#calendar').fullCalendar('removeEvents', selectedEventIds);\n");
      out.write("				        // 일정 리스트 업데이트\n");
      out.write("				        location.reload();\n");
      out.write("				      },\n");
      out.write("				      error: function() {\n");
      out.write("				        alert('일정을 삭제하는데 실패하였습니다.');\n");
      out.write("				      }\n");
      out.write("			    });\n");
      out.write("			    });\n");
      out.write("			\n");
      out.write("			    $('#customConfirmModal').modal('hide');\n");
      out.write("			  });\n");
      out.write("			});\n");
      out.write("\n");
      out.write("	    });\n");
      out.write("	\n");
      out.write("		\n");
      out.write("\n");
      out.write("\n");
      out.write("	\n");
      out.write("  </script>\n");
      out.write("\n");
      out.write("	\n");
      out.write("		<table style=\"width: 100%;\">\n");
      out.write("		\n");
      out.write("			<tr>\n");
      out.write("				<td style=\"width: 60%;\">\n");
      out.write("\n");
      out.write("			<div id='calendar'></div>\n");
      out.write("					\n");
      out.write("				</td>\n");
      out.write("				<td>\n");
      out.write("				\n");
      out.write("					<div style=\"text-align: right;\">\n");
      out.write("					\n");
      out.write("						<div id=\"event-list\">\n");
      out.write("							<div style=\"margin-right: 20px;\">\n");
      out.write("								<button id=\"add-event-btn\" class=\"btn btn-warning\">일정\n");
      out.write("									추가</button>\n");
      out.write("								<button id=\"delete-event-btn\" class=\"btn btn-warning\">일정\n");
      out.write("									삭제</button>\n");
      out.write("							</div>\n");
      out.write("							<div class=\"flex-item card border-light mb-3\">\n");
      out.write("								<div class=\"card-header\"\n");
      out.write("									style=\"height: 40px; font-size: 15px; display: flex; justify-content: center; align-items: center;\">일정\n");
      out.write("									리스트</div>\n");
      out.write("								<div class=\"card-title\" style=\"height: 40px; font-size: 15px;\"></div>\n");
      out.write("								<div class=\"card-body\" style=\"height: 600px\"></div>\n");
      out.write("								<ul id=\"event-check-list\"></ul>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("							</div>\n");
      out.write("\n");
      out.write("						</div>\n");
      out.write("\n");
      out.write("					</div>\n");
      out.write("\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("		</table>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("	<!-- 상세보기 Modal -->\n");
      out.write("	<div class=\"modal\" id=\"eventModal\" tabindex=\"-1\"\n");
      out.write("		aria-labelledby=\"eventModalLabel\" aria-hidden=\"true\">\n");
      out.write("		<div class=\"modal-dialog\" role=\"document\">\n");
      out.write("			<div class=\"modal-content\">\n");
      out.write("				<div class=\"modal-header\">\n");
      out.write("					<h5 class=\"modal-title\" id=\"eventModalLabel\"></h5>\n");
      out.write("					<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"\n");
      out.write("						aria-label=\"Close\">\n");
      out.write("						<span aria-hidden=\"true\"></span>\n");
      out.write("					</button>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"modal-body\">\n");
      out.write("					<table>\n");
      out.write("						<thead>\n");
      out.write("							<tr>\n");
      out.write("								<th>일정 시간</th>\n");
      out.write("							</tr>\n");
      out.write("						</thead>\n");
      out.write("\n");
      out.write("						<tbody>\n");
      out.write("							<tr>\n");
      out.write("								<td>\n");
      out.write("									<p id=\"eventDate\"></p>\n");
      out.write("								</td>\n");
      out.write("							</tr>\n");
      out.write("						</tbody>\n");
      out.write("\n");
      out.write("						<thead>\n");
      out.write("							<tr>\n");
      out.write("								<th>일정 상세 내용</th>\n");
      out.write("							</tr>\n");
      out.write("						</thead>\n");
      out.write("						<tbody>\n");
      out.write("							<tr>\n");
      out.write("								<td class=\"event-description\" style=\"height: 150px;\">\n");
      out.write("									<p id=\"eventDescription\"></p>\n");
      out.write("								</td>\n");
      out.write("							</tr>\n");
      out.write("						</tbody>\n");
      out.write("					</table>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"modal-footer\">\n");
      out.write("					<div>\n");
      out.write("\n");
      out.write("						<button type=\"button\" class=\"btn btn-warning\"\n");
      out.write("							data-bs-dismiss=\"modal\" id=\"share-event-btn\">일정 공유</button>\n");
      out.write("						<button type=\"button\" class=\"btn btn-warning\"\n");
      out.write("							data-bs-dismiss=\"modal\" id=\"update-event-btn\">일정 수정</button>\n");
      out.write("						<button type=\"button\" class=\"btn btn-dark\" data-bs-dismiss=\"modal\"\n");
      out.write("							id=\"one-delete-event-btn\">일정 삭제</button>\n");
      out.write("					</div>\n");
      out.write("\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	<!-- 수정 Modal -->\n");
      out.write("	<div class=\"modal\" id=\"editEventModal\" tabindex=\"-1\"\n");
      out.write("		aria-labelledby=\"editEventModalLabel\" aria-hidden=\"true\">\n");
      out.write("		<div class=\"modal-dialog\" role=\"document\">\n");
      out.write("			<div class=\"modal-content\">\n");
      out.write("				<div class=\"modal-header\">\n");
      out.write("					<h5 class=\"modal-title\" id=\"editEventModalLabel\"></h5>\n");
      out.write("					<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"\n");
      out.write("						aria-label=\"Close\">\n");
      out.write("						<span aria-hidden=\"true\"></span>\n");
      out.write("					</button>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"modal-body\">\n");
      out.write("					<table>\n");
      out.write("						<thead>\n");
      out.write("							<tr>\n");
      out.write("								<th></th>\n");
      out.write("							</tr>\n");
      out.write("						</thead>\n");
      out.write("						<tbody>\n");
      out.write("							<tr>\n");
      out.write("								<td><p id=\"editEventDate\"></p></td>\n");
      out.write("							</tr>\n");
      out.write("						</tbody>\n");
      out.write("						<thead>\n");
      out.write("							<tr>\n");
      out.write("								<th>일정 상세 내용</th>\n");
      out.write("							</tr>\n");
      out.write("						</thead>\n");
      out.write("						<tbody>\n");
      out.write("							<tr>\n");
      out.write("								<td class=\"edit-event-description\" style=\"height: 150px;\"><textarea\n");
      out.write("										id=\"edit-description\"></textarea></td>\n");
      out.write("							</tr>\n");
      out.write("						</tbody>\n");
      out.write("					</table>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"modal-footer\">\n");
      out.write("					<button type=\"button\" class=\"btn btn-warning\"\n");
      out.write("						id=\"edit-save-event-btn\">수정 완료</button>\n");
      out.write("					<button type=\"button\" class=\"btn btn-dark\" data-bs-dismiss=\"modal\">취소</button>\n");
      out.write("\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("	\n");
      out.write("	<!-- 삭제 모달 -->\n");
      out.write("<div class=\"modal\" id=\"customConfirmModal\" tabindex=\"-1\" role=\"dialog\">\n");
      out.write("  <div class=\"modal-dialog\" role=\"document\">\n");
      out.write("    <div class=\"modal-content\">\n");
      out.write("      <div class=\"modal-header bg-warning text-white\">\n");
      out.write("      </div>\n");
      out.write("      <div class=\"modal-body\" style=\"height: 80px; display: flex; align-items: center; justify-content: center;\">\n");
      out.write("        <p>정말로 일정을 삭제하시겠습니까?</p>\n");
      out.write("      </div>\n");
      out.write("      <div class=\"modal-footer\">\n");
      out.write("        <button type=\"button\" class=\"btn btn-warning\" data-dismiss=\"modal\" id=\"cancel\">취소</button>\n");
      out.write("        <button type=\"button\" class=\"btn btn-dark\" id=\"customConfirmBtn\">삭제</button>\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write("	<!-- 다중 삭제 모달 -->\n");
      out.write("<div class=\"modal\" id=\"deleteConfirmModal\" tabindex=\"-1\" role=\"dialog\">\n");
      out.write("  <div class=\"modal-dialog\" role=\"document\">\n");
      out.write("    <div class=\"modal-content\">\n");
      out.write("      <div class=\"modal-header bg-warning text-white\" >\n");
      out.write("        <h8 class=\"modal-title\" ></h8>\n");
      out.write("      </div>\n");
      out.write("      <div class=\"modal-body\" style=\"height: 200px; display: flex; align-items: center; justify-content: center;\">\n");
      out.write("      </div>\n");
      out.write("      <div class=\"modal-footer\">\n");
      out.write("        <button type=\"button\" class=\"btn btn-warning\" data-dismiss=\"modal\" id=\"deletecancel\">취소</button>\n");
      out.write("        <button type=\"button\" class=\"btn btn-dark\" id=\"deleteConfirmBtn\">삭제</button>\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write("	<!-- 메시지 모달 -->\n");
      out.write("<div class=\"modal\" id=\"messageConfirmModal\" tabindex=\"-1\" role=\"dialog\">\n");
      out.write("  <div class=\"modal-dialog\" role=\"document\">\n");
      out.write("    <div class=\"modal-content\" >\n");
      out.write("      <div class=\"modal-header bg-warning text-white\">\n");
      out.write("      </div>\n");
      out.write("      <div class=\"modal-body\" style=\"height: 150px; display: flex; align-items: center; justify-content: center;\">\n");
      out.write("      </div>\n");
      out.write("      <div class=\"modal-footer\">\n");
      out.write("        <button type=\"button\" class=\"btn btn-warning\" data-dismiss=\"modal\" id=\"messageCancel\">확인</button>\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write("<!-- 알림 모달 -->\n");
      out.write("<div class=\"modal\" id=\"today-event-modal\" tabindex=\"-1\" role=\"dialog\">\n");
      out.write("  <div class=\"modal-dialog\" role=\"document\">\n");
      out.write("    <div class=\"modal-content\" >\n");
      out.write("      <div class=\"modal-header bg-warning text-white\" style=\"font-size:17px\">\n");
      out.write("      </div>\n");
      out.write("      <div class=\"modal-body\" style=\"height: 100px; display: flex; align-items: center; justify-content: center;\">\n");
      out.write("      </div>\n");
      out.write("      <div class=\"modal-footer\">\n");
      out.write("        <button type=\"button\" class=\"btn btn-warning\" data-dismiss=\"modal\" id=\"alarmCancel\">확인</button>\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write("	<script>\n");
      out.write("	\n");
      out.write("	// 일정 추가에 그룹 추가 \n");
      out.write("\n");
      out.write("		\n");
      out.write("			// 일정 추가 버튼 클릭 시 일정 추가 화면으로 전환\n");
      out.write("		$('#event-list').on('click', '#add-event-btn', function(){\n");
      out.write("			\n");
      out.write("			$(document).ready(function() {\n");
      out.write("				  // 체크박스 클릭 시\n");
      out.write("				  $('#all-day').change(function() {\n");
      out.write("				    // 체크박스가 체크되면 시작일정의 시간 인풋과 종료일정의 날짜 시간 인풋을 비활성화\n");
      out.write("				    if (this.checked) {\n");
      out.write("				      // 시작일정의 시간 인풋과 종료일정의 날짜 시간 인풋을 비활성화\n");
      out.write("				      $('#event-start-time, #event-end-date, #event-end-time').prop('disabled', true);\n");
      out.write("				      // 시작일정의 시간을 '00:00'으로 변경\n");
      out.write("				      $('#event-start-time').val('00:00');\n");
      out.write("				      // 종료일정의 날짜를 시작일정과 동일한 날짜로 변경\n");
      out.write("				      $('#event-end-date').val($('#event-start-date').val());\n");
      out.write("				      $('#event-end-time').val('23:59');\n");
      out.write("				    } else {\n");
      out.write("				      // 시작일정의 시간 인풋과 종료일정의 날짜 시간 인풋을 활성화\n");
      out.write("				      $('#event-start-time, #event-end-date, #event-end-time').prop('disabled', false);\n");
      out.write("				    }\n");
      out.write("				  });\n");
      out.write("				});\n");
      out.write("			$(document).ready(function(){\n");
      out.write("\n");
      out.write("				  var group1;\n");
      out.write("				  var group2;\n");
      out.write("				  var myGroupname='';\n");
      out.write("				  // 일단 groupSelector를 먼저 정의한다.\n");
      out.write("				  var groupSelector = $(\"#add-group-selector\");\n");
      out.write("\n");
      out.write("				  // Leader\n");
      out.write("				  $.ajax({\n");
      out.write("				    url:'selectGroup1.do?id=' + '");
      out.print(id);
      out.write("',\n");
      out.write("				    type:\"get\",\n");
      out.write("				    success:function(data) {\n");
      out.write("				      if(data!=null && data!=\"\") {\n");
      out.write("				        var group = '';\n");
      out.write("				        $.each(data, function(i){\n");
      out.write("				        	if( data[i].group_code === '");
      out.print(myGroup);
      out.write("') { \n");
      out.write("				        	myGroupname = data[i].group_name ;\n");
      out.write("					          group += '<option value=' + data[i].group_code + '>' + data[i].group_name + '</option>';\n");
      out.write("				        	} });\n");
      out.write("				        $(\"#add-group-selector\").append(group);\n");
      out.write("				        group1 = true;\n");
      out.write("				      } else if (data==null || data==\"\") {\n");
      out.write("				        group1 = false;\n");
      out.write("				      }\n");
      out.write("				    }, \n");
      out.write("				    error:function(){\n");
      out.write("				      alert('error');\n");
      out.write("				    }\n");
      out.write("				  });\n");
      out.write("\n");
      out.write("				  // Member\n");
      out.write("				  $.ajax({\n");
      out.write("				    url:'selectGroup2.do?id=' + '");
      out.print(id);
      out.write("',\n");
      out.write("				    type:\"get\",\n");
      out.write("				    success:function(data) {\n");
      out.write("				      if(data!=null && data!=\"\") {\n");
      out.write("				        var group = '';\n");
      out.write("				        $.each(data, function(i){\n");
      out.write("				        	if( data[i].group_code === '");
      out.print(myGroup);
      out.write("') { \n");
      out.write("					        	myGroupname = data[i].group_name ;\n");
      out.write("				          group += '<option value=' + data[i].group_code + '>' + data[i].group_name + '</option>';\n");
      out.write("				        	}   });\n");
      out.write("				        $(\"#add-group-selector\").append(group);\n");
      out.write("				        group2 = true;\n");
      out.write("				      } else if (data==null || data==\"\") {\n");
      out.write("				        group2 = false;\n");
      out.write("				      }\n");
      out.write("				    },\n");
      out.write("				    error:function(){\n");
      out.write("				      alert('error');\n");
      out.write("				    }\n");
      out.write("				  });\n");
      out.write("				});\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			// 이전 HTML 코드 저장\n");
      out.write("		        previousHTML = $('#event-list').html();\n");
      out.write("			\n");
      out.write("			// 일정 추가 폼으로 변경\n");
      out.write("			  $('#event-list').html(`\n");
      out.write("					  <div class=\"add-form\">\n");
      out.write("			  \n");
      out.write("					  <form action=\"eventwriteAf.do\" id=\"frm\" method=\"post\">\n");
      out.write("					  \n");
      out.write("						<div class=\"flex-item card border-light mb-3\">\n");
      out.write("						<div class=\"card-header\"\n");
      out.write("							style=\"height: 40px; font-size: 16px; display: flex; justify-content: center; align-items: center;\">일정\n");
      out.write("							추가</div>\n");
      out.write("							<div class=\"card-body\" style=\"height: 600px\">\n");
      out.write("							 <div class=\"form-group\">\n");
      out.write("						      <label for=\"event-title\" style = \"font-size: 14px;\" >일정 제목</label>\n");
      out.write("						      <input type=\"text\" class=\"form-control\" id=\"event-title\" placeholder=\"일정 제목을 입력하세요\" style = \"font-size: 14px;\" autocomplete=\"off\">\n");
      out.write("						    </div>\n");
      out.write("						    \n");
      out.write("						    <div class=\"form-group\">\n");
      out.write("						    <label for=\"event-start-date\" style = \"font-size: 14px;\">일정</label>\n");
      out.write("						    <div class=\"input-group date\">\n");
      out.write("						    <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div>\n");
      out.write("						        <input type=\"text\" class=\"form-control datetimepicker-input\" id=\"event-start-date\" data-target=\"#event-start-date\" placeholder=\"시작일\" style = \"font-size: 14px;\" autocomplete=\"off\">\n");
      out.write("						        <input type=\"text\" class=\"form-control datetimepicker-input\" id=\"event-start-time\" data-target=\"#event-start-date\" placeholder=\"시간\" style = \"font-size: 14px;\" autocomplete=\"off\">\n");
      out.write("						        <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div>\n");
      out.write("						        <input type=\"text\" class=\"form-control datetimepicker-input\" id=\"event-end-date\" data-target=\"#event-start-date\" placeholder=\"종료일\" style = \"font-size: 14px;\" autocomplete=\"off\">\n");
      out.write("						        <input type=\"text\" class=\"form-control datetimepicker-input\" id=\"event-end-time\" data-target=\"#event-start-date\" placeholder=\"시간\" style = \"font-size: 14px;\" autocomplete=\"off\">\n");
      out.write("						        <div class=\"input-group-append\" data-target=\"#event-start-date\">\n");
      out.write("						        <div class=\"input-group-text\">\n");
      out.write("						        <input type=\"checkbox\" id=\"all-day\" aria-label=\"all-day\" style=\"margin-top: 1px;\">\n");
      out.write("						        <label for=\"all-day\" style=\"margin-bottom: 0; font-size: 14px; margin-left: 5px;\">종일</label>\n");
      out.write("						      </div>\n");
      out.write("						            \n");
      out.write("						        </div>\n");
      out.write("						        \n");
      out.write("						        \n");
      out.write("						    </div>\n");
      out.write("						    \n");
      out.write("						    \n");
      out.write("						</div>\n");
      out.write("						<label for=\"event-start-date\" style = \"font-size: 14px;\">현재 내 그룹</label>\n");
      out.write("						 <div class=\"input-group-append\">\n");
      out.write("						 \n");
      out.write("						 <select class=\"form-control\" id=\"add-group-selector\"  style = \"font-size: 14px; \" disabled>\n");
      out.write("					    </select>\n");
      out.write("					    </div>\n");
      out.write("						    <div class=\"form-group\">\n");
      out.write("						      <label for=\"event-description\" style = \"font-size: 14px;\">일정 내용</label>\n");
      out.write("						      <textarea class=\"form-control\" id=\"event-description\" rows=\"3\" style=\"height: 300px\"></textarea>\n");
      out.write("						    </div>\n");
      out.write("						    \n");
      out.write("						    <button type=\"button\" class=\"btn btn-warning\" id=\"save-event-btn\" style = \"font-size: 14px;\">저장</button>\n");
      out.write("						    <button type=\"button\" class=\"btn btn-secondary\" id=\"cancel-event-btn\" style = \"font-size: 14px;\">취소</button>\n");
      out.write("						  </form>\n");
      out.write("						</div>\n");
      out.write("\n");
      out.write("					</div>\n");
      out.write("					</div>\n");
      out.write("\n");
      out.write("			  `);\n");
      out.write("								\n");
      out.write("								  \n");
      out.write("// datepicker 초기화\n");
      out.write("$(document).ready(function() {\n");
      out.write("	\n");
      out.write("	\n");
      out.write("  $('#event-start-date, #event-end-date').datepicker({\n");
      out.write("	  	format: 'yyyy-mm-dd',\n");
      out.write("	    autoclose: true,\n");
      out.write("	    todayHighlight: true,\n");
      out.write("	    changeMonth: true,\n");
      out.write("	    changeYear: true,\n");
      out.write("	    showMonthAfterYear: true,\n");
      out.write("	    showButtonPanel: true\n");
      out.write("  });\n");
      out.write("\n");
      out.write("  $('#event-start-time, #event-end-time').timepicker({\n");
      out.write("	    timeFormat: 'HH:mm',\n");
      out.write("	    interval: 30,\n");
      out.write("	    minTime: '0',\n");
      out.write("	    maxTime: '23',\n");
      out.write("	    startTime:'9',\n");
      out.write("	    dynamic: false,\n");
      out.write("	    dropdown: true,\n");
      out.write("	    scrollbar: true\n");
      out.write("});\n");
      out.write("  \n");
      out.write("});\n");
      out.write("\n");
      out.write("			//저장 버튼 클릭 이벤트 처리\n");
      out.write("			$(document).ready(function() {\n");
      out.write("			\n");
      out.write("			  $('#save-event-btn').on('click', function() {\n");
      out.write("			    var title = $('#event-title').val();\n");
      out.write("			\n");
      out.write("			    var startDate = $('#event-start-date').val() + 'T' + $('#event-start-time').val();\n");
      out.write("			    var endDate = $('#event-end-date').val() + 'T' + $('#event-end-time').val();\n");
      out.write("			    \n");
      out.write("			    if (!$('#event-start-date').val() || $('#event-start-date').val() === '') {\n");
      out.write("			    	  $('#messageConfirmModal .modal-body').html('시작일을 선택해주세요.');\n");
      out.write("			    	  $('#messageConfirmModal').modal('show');\n");
      out.write("			    	  return;\n");
      out.write("			    	}\n");
      out.write("			    if (!$('#event-start-time').val() || $('#event-start-time').val() === '') {\n");
      out.write("			    	  $('#messageConfirmModal .modal-body').html('시작일 시간을 선택해주세요.');\n");
      out.write("			    	  $('#messageConfirmModal').modal('show');\n");
      out.write("			    	  return;\n");
      out.write("			    	}\n");
      out.write("			    if (!$('#event-end-date').val() || $('#event-end-date').val() === '') {\n");
      out.write("			    	  $('#messageConfirmModal .modal-body').html('종료일을 선택해주세요.');\n");
      out.write("			    	  $('#messageConfirmModal').modal('show');\n");
      out.write("			    	  return;\n");
      out.write("			    	}\n");
      out.write("			    if (!$('#event-end-time').val() || $('#event-end-time').val() === '') {\n");
      out.write("			    	  $('#messageConfirmModal .modal-body').html('종료일 시간을 선택해주세요.');\n");
      out.write("			    	  $('#messageConfirmModal').modal('show');\n");
      out.write("			    	  return;\n");
      out.write("			    	}\n");
      out.write("			    if ($('#all-day').prop('checked')) {\n");
      out.write("				      // 시작일정의 시간을 '00:00'으로 변경\n");
      out.write("				      startDate = $('#event-start-date').val() + 'T00:00';\n");
      out.write("				      // 종료일정의 날짜를 시작일정과 동일한 날짜로 변경\n");
      out.write("				      endDate = $('#event-start-date').val() + 'T23:59';\n");
      out.write("\n");
      out.write("				    }\n");
      out.write("			\n");
      out.write("			    var description = $('#event-description').val();\n");
      out.write("			    var groupCode = $('#add-group-selector').val();\n");
      out.write("			    var id = '");
      out.print(id);
      out.write("'; \n");
      out.write("			     \n");
      out.write("			    var eventData = {\n");
      out.write("			      \"id\": id,\n");
      out.write("				  \"groupCode\": groupCode,\n");
      out.write("				  \"title\": title,\n");
      out.write("				 \"startDate\": startDate,\n");
      out.write("				 \"endDate\": endDate,\n");
      out.write("				  \"description\": description\n");
      out.write("			    };\n");
      out.write("			    if (!title) {\n");
      out.write("		            $('#messageConfirmModal .modal-body').html('제목을 입력해주세요');\n");
      out.write("		            $('#messageConfirmModal').modal('show');\n");
      out.write("			        return;\n");
      out.write("			    }\n");
      out.write("			    // 종료 일정 유효성 검사\n");
      out.write("			    if (moment(endDate).isSameOrBefore(startDate)) {\n");
      out.write("		            $('#messageConfirmModal .modal-body').html('종료일은 시작일보다 이후여야 합니다.');\n");
      out.write("		            $('#messageConfirmModal').modal('show');\n");
      out.write("			        return;\n");
      out.write("			      }\n");
      out.write("				 // 체크박스가 선택된 경우\n");
      out.write("\n");
      out.write("			\n");
      out.write("			    $.ajax({\n");
      out.write("			      url: 'eventwriteAf.do' ,\n");
      out.write("			      type: 'POST',\n");
      out.write("			      data: JSON.stringify(eventData),\n");
      out.write("			      contentType: 'application/json',\n");
      out.write("			      success: function(response) {\n");
      out.write("			        // 일정을 추가한 후 FullCalendar를 갱신합니다.\n");
      out.write("			        $('#calendar').fullCalendar('refetchEvents');\n");
      out.write("			        // 일정 리스트로 변경합니다.\n");
      out.write("			        location.reload();\n");
      out.write("			      },\n");
      out.write("			      error: function() {\n");
      out.write("			        alert('일정을 추가하는데 실패하였습니다.');\n");
      out.write("			      }\n");
      out.write("			    });\n");
      out.write("			  });\n");
      out.write("			});\n");
      out.write("\n");
      out.write("			// 취소 버튼 클릭 이벤트 처리\n");
      out.write("				 $('#cancel-event-btn').on('click', function() {\n");
      out.write("			  // 이전 화면으로 돌아가기 전에 클릭 이벤트 핸들러를 제거합니다.\n");
      out.write("				 $('#add-event-btn').off('click');\n");
      out.write("				 // 일정 리스트로 변경\n");
      out.write("			     $('#event-list').html(previousHTML);\n");
      out.write("						  });\n");
      out.write("\n");
      out.write("								});\n");
      out.write("			\n");
      out.write("				// 일정 상세 보기 \n");
      out.write("				$('.card-body').off('click').on('click', '.event-title', function() {\n");
      out.write("					\n");
      out.write("				  var eventId = $(this).data('eventid');\n");
      out.write("				  var scheduleId = $(this).data('eventid'); // 모달창에 전달할 scheduleId\n");
      out.write("				  \n");
      out.write("				  \n");
      out.write("				  var events = $('#calendar').fullCalendar('clientEvents');\n");
      out.write("				  var event = events.filter(function(event) {\n");
      out.write("				    return event.scheduleId === eventId;\n");
      out.write("			 		 })[0];\n");
      out.write("			\n");
      out.write("				  $('#eventModalLabel').text(event.title);\n");
      out.write("				  $('#eventDate').text(moment(event.start).format('YYYY-MM-DD HH:mm') + ' - ' + moment(event.end).format('YYYY-MM-DD HH:mm'));\n");
      out.write("				  $('.event-description').text(event.description);\n");
      out.write("				  $('#update-event-btn').data('scheduleId', scheduleId); \n");
      out.write("				  $('#share-event-btn').data('scheduleId', scheduleId); \n");
      out.write("				  $('#one-delete-event-btn').data('scheduleId', scheduleId);// 일정 수정, 삭제 버튼에 scheduleId 전달\n");
      out.write("				  $('#eventModal').modal('show');\n");
      out.write("			\n");
      out.write("				});\n");
      out.write("				\n");
      out.write("				// 일정 수정\n");
      out.write("				$('#update-event-btn').off('click').on('click', function() {\n");
      out.write("\n");
      out.write("					// datepicker 초기화\n");
      out.write("					$(document).ready(function() {												\n");
      out.write("					  $('#edit-start-date, #edit-end-date').datepicker({\n");
      out.write("						  	format: 'yyyy-mm-dd',\n");
      out.write("						    autoclose: true,\n");
      out.write("						    todayHighlight: true,\n");
      out.write("						    changeMonth: true,\n");
      out.write("						    changeYear: true,\n");
      out.write("						    showMonthAfterYear: true,\n");
      out.write("						    showButtonPanel: true\n");
      out.write("					  });\n");
      out.write("\n");
      out.write("					  $('#edit-start-time, #edit-end-time').timepicker({\n");
      out.write("						    timeFormat: 'HH:mm',\n");
      out.write("						    interval: 30,\n");
      out.write("						    minTime: '0',\n");
      out.write("						    maxTime: '23',\n");
      out.write("						    dynamic: false,\n");
      out.write("						    dropdown: true,\n");
      out.write("						    scrollbar: true\n");
      out.write("					});\n");
      out.write("					  \n");
      out.write("					});\n");
      out.write("\n");
      out.write("\n");
      out.write("						\n");
      out.write("					  var eventId = $(this).data('scheduleId');\n");
      out.write("					  var scheduleId = $(this).data('scheduleId'); // 모달창에 전달할 scheduleId\n");
      out.write("					  \n");
      out.write("					  var events = $('#calendar').fullCalendar('clientEvents');\n");
      out.write("					  var event = events.filter(function(event) {\n");
      out.write("					    return event.scheduleId === eventId;\n");
      out.write("					  })[0];\n");
      out.write("					  \n");
      out.write("\n");
      out.write("					 \n");
      out.write("					$('#eventModal').modal('hide');\n");
      out.write("					$('#editEventModal').modal('show');\n");
      out.write("					\n");
      out.write("					$('#editEventModalLabel').html('<form action=\"eventupdate.do\" id=\"frm\" method=\"post\"><input type=\"text\" id=\"edit-title\" data-eventid=\"' + event.scheduleId + '\" value=\"[수정] ' + event.title + '\"autocomplete=\"off\">');\n");
      out.write("\n");
      out.write("					$('#editEventDate').html('<div class=\"form-group\">' +\n");
      out.write("						    '<label for=\"event-start-date\" style=\"font-size: 14px;\">일정</label>' +\n");
      out.write("						    '<div class=\"input-group date\">' +\n");
      out.write("						    '<div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div>' +\n");
      out.write("						    '<input type=\"text\" class=\"form-control datetimepicker-input\" id=\"edit-start-date\" value=\"' + event.start.format('YYYY-MM-DD') + '\" style=\"font-size: 14px;\" autocomplete=\"off\">' +\n");
      out.write("						    '<input type=\"text\" class=\"form-control datetimepicker-input\" id=\"edit-start-time\" value=\"' + event.start.format('HH:mm') + '\" style=\"font-size: 14px;\" autocomplete=\"off\">' +\n");
      out.write("						    \n");
      out.write("						    '<div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div>' +\n");
      out.write("						    '<input type=\"text\" class=\"form-control datetimepicker-input\" id=\"edit-end-date\" value=\"' + event.end.format('YYYY-MM-DD') + '\" style=\"font-size: 14px;\" autocomplete=\"off\"> ' +\n");
      out.write("						    '<input type=\"text\" class=\"form-control datetimepicker-input\" id=\"edit-end-time\" value=\"' + event.end.format('HH:mm') + '\" style=\"font-size: 14px;\" autocomplete=\"off\">' +\n");
      out.write("						    '<div class=\"input-group-append\" data-target=\"#edit-start-date\">' +\n");
      out.write("						    '<div class=\"input-group-text\">' +\n");
      out.write("						    '<input type=\"checkbox\" id=\"all-day-update\" name=\"all-day-update\" aria-label=\"all-day-update\" style=\"margin-top: 1px;\">'+\n");
      out.write("						    '<label for=\"all-day-update\" style=\"margin-bottom: 0; font-size: 14px; margin-left: 5px;\">종일</label>'+\n");
      out.write("\n");
      out.write("						    '</div>' +\n");
      out.write("						    '</div>' +\n");
      out.write("						    '</div>' +\n");
      out.write("\n");
      out.write("						    '</form>');\n");
      out.write("					$('#all-day-update').on('change', function() {\n");
      out.write("					    // 체크박스가 체크되면 시작일정의 시간 인풋과 종료일정의 날짜 시간 인풋을 비활성화\n");
      out.write("					    if (this.checked) {\n");
      out.write("					        console.log('checked');\n");
      out.write("					        // 시작일정의 시간 인풋과 종료일정의 날짜 시간 인풋을 비활성화\n");
      out.write("					        $('#edit-start-time, #edit-end-date, #edit-end-time').prop('disabled', true);\n");
      out.write("					        // 시작일정의 시간을 '00:00'으로 변경\n");
      out.write("					        $('#edit-start-time').val('00:00');\n");
      out.write("					        // 종료일정의 날짜를 시작일정과 동일한 날짜로 변경\n");
      out.write("					        $('#edit-end-date').val($('#edit-start-date').val());\n");
      out.write("					        $('#edit-end-time').val('23:59');\n");
      out.write("					    } else {\n");
      out.write("					        // 시작일정의 시간 인풋과 종료일정의 날짜 시간 인풋을 활성화\n");
      out.write("					        $('#edit-start-time, #edit-end-date, #edit-end-time').prop('disabled', false);\n");
      out.write("					    }\n");
      out.write("					}); \n");
      out.write("					$('.edit-event-description').html('<textarea id=\"edit-description\" style=\"width:470px; height: 300px;\">' + event.description + '</textarea>');\n");
      out.write("					$('#edit-save-event-btn').data('scheduleId', scheduleId); \n");
      out.write("\n");
      out.write("					\n");
      out.write("					//수정완료 버튼 클릭 이벤트 처리\n");
      out.write("					\n");
      out.write("					  $('#edit-save-event-btn').on('click', function() {\n");
      out.write("						$('#editEventModal').modal('hide');\n");
      out.write("						var eventId = $(this).data('scheduleId');\n");
      out.write("						\n");
      out.write("					    var title = $('#edit-title').val();\n");
      out.write("					    var startDate = $('#edit-start-date').val() + 'T' + $('#edit-start-time').val();\n");
      out.write("					    var endDate = $('#edit-end-date').val() + 'T' + $('#edit-end-time').val();\n");
      out.write("					    var description = $('#edit-description').val();\n");
      out.write("					    var groupCode = '");
      out.print(myGroup);
      out.write("'; \n");
      out.write("\n");
      out.write("					    var eventData = {\n");
      out.write("					     \"scheduleId\" : eventId,\n");
      out.write("						  \"groupCode\": groupCode,\n");
      out.write("						  \"title\": title,\n");
      out.write("						 \"startDate\": startDate,\n");
      out.write("						 \"endDate\": endDate,\n");
      out.write("						  \"description\": description\n");
      out.write("					    };\n");
      out.write("					\n");
      out.write("\n");
      out.write("					    \n");
      out.write("					    $.ajax({\n");
      out.write("					    	  url: 'eventupdate.do',\n");
      out.write("					    	  type: 'POST',\n");
      out.write("					    	  data: JSON.stringify(eventData),\n");
      out.write("					    	  contentType: 'application/json',\n");
      out.write("					    	  success: function(response) {\n");
      out.write("					    		  location.reload();\n");
      out.write("					    	  },\n");
      out.write("					    	  error: function() {\n");
      out.write("					    	    alert('일정을 수정하는데 실패하였습니다.');\n");
      out.write("					    	  }\n");
      out.write("					    	});\n");
      out.write("					  });\n");
      out.write(" });\n");
      out.write("				// 단일 일정 삭제 버튼 클릭 이벤트 처리\n");
      out.write("					$('#one-delete-event-btn').click(function() {\n");
      out.write("					  var eventId = $('#one-delete-event-btn').data('scheduleId');\n");
      out.write("\n");
      out.write("					  // 확인창 띄우기\n");
      out.write("					  $('#customConfirmModal').modal('show');\n");
      out.write("					\n");
      out.write("					  $('#customConfirmBtn').click(function() {\n");
      out.write("					    // 일정 삭제 요청\n");
      out.write("					    $.ajax({\n");
      out.write("					      url: 'eventdelete.do',\n");
      out.write("					      type: 'POST',\n");
      out.write("					      data: { 'scheduleId': eventId },\n");
      out.write("					      success: function(response) {\n");
      out.write("					        // FullCalendar에서 일정 삭제\n");
      out.write("					        $('#calendar').fullCalendar('removeEvents', eventId);\n");
      out.write("					        // 일정 리스트 업데이트\n");
      out.write("					        location.reload();\n");
      out.write("					      },\n");
      out.write("					      error: function() {\n");
      out.write("					        alert('일정을 삭제하는데 실패하였습니다.');\n");
      out.write("					      }\n");
      out.write("					    });\n");
      out.write("					\n");
      out.write("					    $('#customConfirmModal').modal('hide');\n");
      out.write("					  });\n");
      out.write("					});\n");
      out.write("\n");
      out.write("// cancel 동작\n");
      out.write("$('#customConfirmModal, #deleteConfirmModal, #messageConfirmModal, #today-event-modal').on('click', '[id$=\"Cancel\"]', function() {\n");
      out.write("  $(this).closest('.modal').modal('hide');\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("// 알림 \n");
      out.write("\n");
      out.write("$(document).ready(function() {\n");
      out.write("  var today = new Date(); // 현재 날짜 객체 생성\n");
      out.write("  var dd = today.getDate();\n");
      out.write("  var mm = today.getMonth() + 1;\n");
      out.write("  var yyyy = today.getFullYear();\n");
      out.write("  if (dd < 10) {\n");
      out.write("    dd = '0' + dd;\n");
      out.write("  }\n");
      out.write("  if (mm < 10) {\n");
      out.write("    mm = '0' + mm;\n");
      out.write("  }\n");
      out.write("  today = yyyy + '-' + mm + '-' + dd; // yyyy-mm-dd 형식으로 변환\n");
      out.write("\n");
      out.write("  // 일정 목록을 불러와서 현재 날짜와 비교\n");
      out.write("  $.ajax({\n");
      out.write("	url: 'groupeventlist.do?id=' + '");
      out.print(id);
      out.write("&groupCode=");
      out.print(myGroup);
      out.write("',\n");
      out.write("    type: 'get',\n");
      out.write("    dataType: 'json',\n");
      out.write("    success: function(data) {\n");
      out.write("      if (data != null && data.length > 0) {\n");
      out.write("        var todayEventList = [];\n");
      out.write("        for (var i = 0; i < data.length; i++) {\n");
      out.write("          var eventStart = data[i].startDate.split(\" \")[0];\n");
      out.write("          var eventEnd = data[i].endDate.split(\" \")[0];\n");
      out.write("          if (eventStart <= today && today <= eventEnd) {\n");
      out.write("            todayEventList.push(data[i]);\n");
      out.write("          }\n");
      out.write("        }\n");
      out.write("        if (todayEventList.length > 0) {\n");
      out.write("          // 일정이 있을 경우 모달 띄우기\n");
      out.write("          var alreadyShown = sessionStorage.getItem('todayEventShown');\n");
      out.write("          if (alreadyShown !== 'true') {\n");
      out.write("            $('#today-event-modal').modal('show');\n");
      out.write("            // 일정 목록을 모달에 출력\n");
      out.write("            var todayEventHtml = '';\n");
      out.write("            for (var j = 0; j < todayEventList.length; j++) {\n");
      out.write("              todayEventHtml += todayEventList[j].title + '</br>';\n");
      out.write("            }\n");
      out.write("            $('#today-event-modal .modal-header').html('오늘 일정을 확인하세요.');\n");
      out.write("            $('#today-event-modal .modal-body').html(todayEventHtml);\n");
      out.write("            // 확인 버튼을 누르면 해당 일정을 더 이상 보지 않도록 설정\n");
      out.write("            $('#today-event-modal .modal-footer button').click(function() {\n");
      out.write("              sessionStorage.setItem('todayEventShown', 'true');\n");
      out.write("            });\n");
      out.write("          }\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("    },\n");
      out.write("  });\n");
      out.write("});\n");
      out.write("\n");
      out.write("// 일정 공유\n");
      out.write("$('#share-event-btn').click(function() {\n");
      out.write("	  var scheduleId = $(this).data('scheduleId');\n");
      out.write("  \n");
      out.write("  // AJAX를 이용하여 서버에 일정 정보를 전송\n");
      out.write("  $.ajax({\n");
      out.write("    url: 'userId.do?group_code=' + '");
      out.print(myGroup);
      out.write("',\n");
      out.write("    type: 'get',\n");
      out.write("    success: function(data) {\n");
      out.write("        for (var i = 0; i < data.length; i++) {\n");
      out.write("            \n");
      out.write("            var shareid = data[i];\n");
      out.write("            console.log(shareid);\n");
      out.write("            // 내가 로그인한 유저의 아이디와 같은 경우 일정 중복 추가되지 않게 건너뛰기\n");
      out.write("            if (data[i] === '");
      out.print( id );
      out.write("') {\n");
      out.write("                continue;\n");
      out.write("            }\n");
      out.write("          \n");
      out.write("          	  $.get('eventdetail.do', { scheduleId: scheduleId }, function(event) {\n");
      out.write("          	    // 서버에서 반환된 일정 정보를 처리하는 로직 작성\n");
      out.write("          	     \n");
      out.write("          	      var title = event.title;\n");
      out.write("				  var start = event.startDate;\n");
      out.write("				  var end = event.endDate;\n");
      out.write("				  var description = event.description;\n");
      out.write("				  var groupCode = '");
      out.print(myGroup);
      out.write("';\n");
      out.write("\n");
      out.write("				  \n");
      out.write("				  \n");
      out.write("	          	  var eventData ={\n");
      out.write("	          	    id : shareid,\n");
      out.write("	          	    title : title,\n");
      out.write("	          	    startDate : start,\n");
      out.write("	          	    endDate : end,\n");
      out.write("	          	    description : description,\n");
      out.write("	          	    groupCode : groupCode\n");
      out.write("	          	    };\n");
      out.write("          	    console.log(eventData);\n");
      out.write("          	    \n");
      out.write("          	 $.ajax({\n");
      out.write("			      url: 'eventwriteAf.do' ,\n");
      out.write("			      type: 'POST',\n");
      out.write("			      data: JSON.stringify(eventData),\n");
      out.write("			      contentType: 'application/json',\n");
      out.write("			      success: function(response) {\n");
      out.write("			        // 일정을 추가한 후 FullCalendar를 갱신합니다.\n");
      out.write("			        $('#calendar').fullCalendar('refetchEvents');\n");
      out.write("			        // 일정 리스트로 변경합니다.\n");
      out.write("			        \n");
      out.write("			        $('#today-event-modal .modal-header').html('알림');\n");
      out.write("			        $('#today-event-modal .modal-body').html('일정을 공유하였습니다.');\n");
      out.write("			        $('#today-event-modal').modal('show');\n");
      out.write("			      },\n");
      out.write("			      error: function() {\n");
      out.write("			        alert('일정을 추가하는데 실패하였습니다.');\n");
      out.write("			      }\n");
      out.write("			    });\n");
      out.write("          	    \n");
      out.write("\n");
      out.write("          	    // 캘린더에 일정 추가하는 로직 작성\n");
      out.write("          	  },\"json\");\n");
      out.write("          	\n");
      out.write("			   \n");
      out.write("            \n");
      out.write("        }\n");
      out.write("    },\n");
      out.write("    error: function(jqXHR, textStatus, errorThrown) {\n");
      out.write("        // 처리 중 오류가 발생했을 때 수행할 코드\n");
      out.write("    }\n");
      out.write("});\n");
      out.write("  \n");
      out.write("  $.ajax({\n");
      out.write("	    url: 'getGroupInfo.do?group_code=' + '");
      out.print(myGroup);
      out.write("',\n");
      out.write("	    type: 'get',\n");
      out.write("	    success: function(data) {\n");
      out.write("	            \n");
      out.write("	            var shareid = data.leader;\n");
      out.write("	            console.log(shareid);\n");
      out.write("	            // 내가 로그인한 유저의 아이디와 같은 경우 일정 중복 추가되지 않게 건너뛰기\n");
      out.write("	            if (data !== '");
      out.print( id );
      out.write("') {\n");
      out.write("	            \n");
      out.write("	          \n");
      out.write("	          	  $.get('eventdetail.do', { scheduleId: scheduleId }, function(event) {\n");
      out.write("	          	    // 서버에서 반환된 일정 정보를 처리하는 로직 작성\n");
      out.write("	          	     \n");
      out.write("	          	      var title = event.title;\n");
      out.write("					  var start = event.startDate;\n");
      out.write("					  var end = event.endDate;\n");
      out.write("					  var description = event.description;\n");
      out.write("					  var groupCode = '");
      out.print(myGroup);
      out.write("';\n");
      out.write("\n");
      out.write("\n");
      out.write("		          	  var eventData ={\n");
      out.write("		          	    id : shareid,\n");
      out.write("		          	    title : title,\n");
      out.write("		          	    startDate : start,\n");
      out.write("		          	    endDate : end,\n");
      out.write("		          	    description : description,\n");
      out.write("		          	    groupCode : groupCode\n");
      out.write("		          	    };\n");
      out.write("	          	    console.log(eventData);\n");
      out.write("	          	    \n");
      out.write("	          	 $.ajax({\n");
      out.write("				      url: 'eventwriteAf.do' ,\n");
      out.write("				      type: 'POST',\n");
      out.write("				      data: JSON.stringify(eventData),\n");
      out.write("				      contentType: 'application/json',\n");
      out.write("				      success: function(response) {\n");
      out.write("				        // 일정을 추가한 후 FullCalendar를 갱신합니다.\n");
      out.write("				        $('#calendar').fullCalendar('refetchEvents');\n");
      out.write("				        // 일정 리스트로 변경합니다.\n");
      out.write("				        \n");
      out.write("				        $('#today-event-modal .modal-header').html('알림');\n");
      out.write("				        $('#today-event-modal .modal-body').html('일정을 공유하였습니다.');\n");
      out.write("				        $('#today-event-modal').modal('show');\n");
      out.write("				      },\n");
      out.write("				      error: function() {\n");
      out.write("				        alert('일정을 추가하는데 실패하였습니다.');\n");
      out.write("				      }\n");
      out.write("				    });\n");
      out.write("	          	    \n");
      out.write("\n");
      out.write("	          	    // 캘린더에 일정 추가하는 로직 작성\n");
      out.write("	          	  },\"json\");\n");
      out.write("	          	\n");
      out.write("				   \n");
      out.write("	            \n");
      out.write("	        \n");
      out.write("	            }},\n");
      out.write("	    error: function(jqXHR, textStatus, errorThrown) {\n");
      out.write("	        // 처리 중 오류가 발생했을 때 수행할 코드\n");
      out.write("	    }\n");
      out.write("	});\n");
      out.write("  \n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("		</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
