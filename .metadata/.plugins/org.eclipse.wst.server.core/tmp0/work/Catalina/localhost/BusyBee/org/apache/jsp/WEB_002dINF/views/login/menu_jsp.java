/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-18 09:10:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.login;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import mul.cam.a.dto.GroupMemDto;
import mul.cam.a.dto.GroupDto;
import mul.cam.a.dto.UserDto;

public final class menu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("mul.cam.a.dto.UserDto");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("mul.cam.a.dto.GroupMemDto");
    _jspx_imports_classes.add("mul.cam.a.dto.GroupDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("	\n");
      out.write("	");

	UserDto login = (UserDto) session.getAttribute("login");
	String id = login.getId();

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\n");
      out.write("\n");
      out.write("	\n");
      out.write("	\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("/* 메뉴 CSS */\n");
      out.write("\n");
      out.write("    #topMenu {\n");
      out.write("            height: 30px;  /* 메인 메뉴의 높이 */\n");
      out.write("            width: 100px;  /* 메인 메뉴의 넓이 */\n");
      out.write("    }\n");
      out.write("    #topMenu ul {           /* 메인 메뉴 안의 ul을 설정함: 상위메뉴의 ul+하위 메뉴의 ul */\n");
      out.write("        list-style-type: none;  /* 메인 메뉴 안의 ul 내부의 목록 표시를 없애줌 */\n");
      out.write("        margin: 0px;            /* 메인 메뉴 안의 ul의 margin을 없앰 */\n");
      out.write("        padding: 0px;           /* 메인 메뉴 안의 ul의 padding을 없앰 */\n");
      out.write("    }\n");
      out.write("    #topMenu ul li {            /* 메인 메뉴 안에 ul 태그 안에 있는 li 태그의 스타일 적용(상위/하위메뉴 모두) */\n");
      out.write("        color: white;               /* 글씨 색을 흰색으로 설정 */\n");
      out.write("        background-color: #2D2D2D;  /* 배경 색을 RGB(2D2D2D)로 설정 */\n");
      out.write("        float: left;                /* 왼쪽으로 나열되도록 설정 */\n");
      out.write("        line-height: 30px;          /* 텍스트 한 줄의 높이를 30px로 설정 */\n");
      out.write("        vertical-align: middle;     /* 세로 정렬을 가운데로 설정 */\n");
      out.write("        text-align: center;         /* 텍스트를 가운데로 정렬 */\n");
      out.write("        position: relative;         /* 해당 li 태그 내부의 top/left 포지션 초기화 */\n");
      out.write("    }\n");
      out.write("    .menuLink {           /* 상위 메뉴와 하위 메뉴의 a 태그에 공통으로 설정할 스타일 */\n");
      out.write("        text-decoration:none;               /* a 태그의 꾸밈 효과 제거 */\n");
      out.write("        display: block;                     /* a 태그의 클릭 범위를 넓힘 */\n");
      out.write("        width: 250px;                       /* 기본 넓이를 150px로 설정 */\n");
      out.write("        font-size: 32px;                    /* 폰트 사이즈를 12px로 설정 */\n");
      out.write("        font-weight: bold;                  /* 폰트를 굵게 설정 */\n");
      out.write("        font-family: \"Trebuchet MS\", Dotum; /* 기본 폰트를 영어/한글 순서대로 설정 */\n");
      out.write("    }\n");
      out.write("    .submenuLink{\n");
      out.write("        text-decoration:none;               /* a 태그의 꾸밈 효과 제거 */\n");
      out.write("        display: block;                     /* a 태그의 클릭 범위를 넓힘 */\n");
      out.write("        width: 250px;                       /* 기본 넓이를 150px로 설정 */\n");
      out.write("        font-size: 16px;                    /* 폰트 사이즈를 12px로 설정 */\n");
      out.write("        font-weight: bold;                  /* 폰트를 굵게 설정 */\n");
      out.write("        font-family: \"Trebuchet MS\", Dotum; /* 기본 폰트를 영어/한글 순서대로 설정 */\n");
      out.write("    }\n");
      out.write("    .menuLink {     /* 상위 메뉴의 글씨색을 흰색으로 설정 */\n");
      out.write("        color: white;\n");
      out.write("    }\n");
      out.write("    .topMenuLi:hover .menuLink {    /* 상위 메뉴의 li에 마우스오버 되었을 때 스타일 설정 */\n");
      out.write("        color: red;                 /* 글씨 색 빨간색 */\n");
      out.write("        background-color: #4d4d4d;  /* 배경색을 밝은 회색으로 설정 */\n");
      out.write("    }\n");
      out.write("    .submenuLink {          /* 하위 메뉴의 a 태그 스타일 설정 */\n");
      out.write("        color: #2d2d2d;             /* 글씨 색을 RGB(2D2D2D)로 설정 */\n");
      out.write("        background-color: white;    /* 배경색을 흰색으로 설정 */\n");
      out.write("        border: solid 1px black;    /* 테두리를 설정 */\n");
      out.write("        margin-top: -1px;           /* 위 칸의 하단 테두리와 아래칸의 상단 테두리가 겹쳐지도록 설정 */\n");
      out.write("    }\n");
      out.write("    .longLink {     /* 좀 더 긴 메뉴 스타일 설정 */\n");
      out.write("        width: 190px;   /* 넓이는 190px로 설정 */\n");
      out.write("    }\n");
      out.write("    .submenu {              /* 하위 메뉴 스타일 설정 */\n");
      out.write("        position: absolute;     /* html의 flow에 영향을 미치지 않게 absolute 설정 */\n");
      out.write("        height: 0px;            /* 초기 높이는 0px로 설정 */\n");
      out.write("        transition: height .2s; /* height를 변화 시켰을 때 0.2초간 변화 되도록 설정(기본) */\n");
      out.write("        -webkit-transition: height .2s; /* height를 변화 시켰을 때 0.2초간 변화 되도록 설정(구버전 크롬/사파라ㅣ) */\n");
      out.write("        -moz-transition: height .2s; /* height를 변화 시켰을 때 0.2초간 변화 되도록 설정(구버전 파폭) */\n");
      out.write("        -o-transition: height .2s; /* height를 변화 시켰을 때 0.2초간 변화 되도록 설정(구버전 오페라) */\n");
      out.write("   		max-height: 200px;\n");
      out.write("		overflow-x: hidden;\n");
      out.write("		overflow-y: auto;\n");
      out.write("   \n");
      out.write("    }\n");
      out.write("    .topMenuLi:hover .submenu { /* 상위 메뉴에 마우스 모버한 경우 그 안의 하위 메뉴 스타일 설정 */\n");
      out.write("        height: 500px;           /* 높이를 93px로 설정 */\n");
      out.write("    }\n");
      out.write("    .submenuLink:hover {        /* 하위 메뉴의 a 태그의 마우스 오버 스타일 설정 */\n");
      out.write("        color: red;                 /* 글씨색을 빨간색으로 설정 */\n");
      out.write("        background-color: #dddddd;  /* 배경을 RGB(DDDDDD)로 설정 */\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<input type=\"hidden\" id=\"id\" value='");
      out.print(id );
      out.write("'>\n");
      out.write("<nav id=\"topMenu\" >\n");
      out.write("		<ul>\n");
      out.write("			<li class=\"topMenuLi\">\n");
      out.write("                <a class=\"menuLink\">나의 그룹</a>\n");
      out.write("                <ul id=\"submenu\" class=\"submenu\">                               \n");
      out.write("                <li><p id=\"nogroup\" ></p></li>\n");
      out.write("  \n");
      out.write("               </ul>\n");
      out.write("               \n");
      out.write("               \n");
      out.write("               \n");
      out.write("		</ul>\n");
      out.write("	</nav>\n");
      out.write("\n");
      out.write("\n");
      out.write("  <script type=\"text/javascript\">\n");
      out.write("   $(document).ready(function(){\n");
      out.write("		var group1;\n");
      out.write("		var group2;\n");
      out.write("		var count = 1;\n");
      out.write("		\n");
      out.write("		// Leader\n");
      out.write("		$.ajax({\n");
      out.write("			url:\"selectGroup1.do\",\n");
      out.write("			type:\"get\",\n");
      out.write("			data:{\"id\":$(\"#id\").val()},\n");
      out.write("			async:false,\n");
      out.write("			success:function(data) {\n");
      out.write("				//alert(data);\n");
      out.write("\n");
      out.write("				if(data!=null && data!=\"\") {\n");
      out.write("					var submenu = '';\n");
      out.write("					$.each(data, function(i){\n");
      out.write("						 submenu += \"<li><a href='groupMainPage.do?group_code=\"+data[i].group_code+\"' class='submenuLink longLink'>\"+data[i].group_name+\"</a></li>\";\n");
      out.write("					});\n");
      out.write("					$(\"#submenu\").append(submenu);\n");
      out.write("					group1 = true;\n");
      out.write("					groupCheck();\n");
      out.write("				} else if (data==null || data==\"\") {\n");
      out.write("					group1 = false;\n");
      out.write("					groupCheck();\n");
      out.write("				}\n");
      out.write("			},	\n");
      out.write("			error:function(){\n");
      out.write("				alert('error');\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("		\n");
      out.write("	// Member\n");
      out.write("	$.ajax({\n");
      out.write("		url:\"selectGroup2.do\",\n");
      out.write("		type:\"get\",\n");
      out.write("		data:{\"id\":$(\"#id\").val()},\n");
      out.write("		success:function(data) {\n");
      out.write("			//alert(data);\n");
      out.write("\n");
      out.write("			if(data!=null && data!=\"\") {\n");
      out.write("				var submenu = '';\n");
      out.write("				$.each(data, function(i){\n");
      out.write("					var group_code = data[i].group_code;\n");
      out.write("					submenu += \"<li><a href='goSubMenu.do' class='submenuLink longLink'>\"+data[i].group_name+\"</a></li>\"\n");
      out.write("								+\"<li><a href='goSubMenu.do' class='submenuLink longLink'>\"+data[i].group_code+\"</a></li>\"\n");
      out.write("								+\"<li><a href='goSubMenu.do' class='submenuLink longLink'>\"+data[i].group_info+\"</a></li>\";\n");
      out.write("\n");
      out.write("				});\n");
      out.write("				$(\"#submenu\").append(submenu);\n");
      out.write("				group2 = true;\n");
      out.write("				groupCheck();\n");
      out.write("			} else if (data==null || data==\"\") {\n");
      out.write("				group2 = false;\n");
      out.write("				groupCheck();\n");
      out.write("			}\n");
      out.write("		},\n");
      out.write("		error:function(){\n");
      out.write("			alert('error');\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		\n");
      out.write("		\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	function groupCheck(){\n");
      out.write("		\n");
      out.write("		/* 		alert(\"group1 =\" + group1);\n");
      out.write("				alert(\"group2 =\" + group2);\n");
      out.write("				 */\n");
      out.write("				if(group1==\"undefined\" || group2==\"undefined\") {\n");
      out.write("					return;\n");
      out.write("				}\n");
      out.write("				\n");
      out.write("				if(group1==false && group2==false) {\n");
      out.write("		/* 			alert(\"group1* =\" + group1);\n");
      out.write("					alert(\"group2* =\" + group2); */\n");
      out.write("					$(\"#nogroup\").text('가입한 그룹이 없습니다.');	\n");
      out.write("				}\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("		});\n");
      out.write(" \n");
      out.write("  </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
